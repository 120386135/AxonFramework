/*
 * Copyright (c) 2010-2011. Axon Framework
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.axonframework.commandhandling.disruptor;

import com.lmax.disruptor.EventHandler;
import org.axonframework.commandhandling.CommandCallback;
import org.axonframework.domain.EventMessage;
import org.axonframework.eventhandling.EventBus;
import org.axonframework.eventsourcing.EventSourcedAggregateRoot;
import org.axonframework.eventstore.EventStore;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.concurrent.Executor;

import static java.lang.String.format;

/**
 * Component of the DisruptorCommandBus that stores and publishes events generated by the command's execution.
 *
 * @author Allard Buijze
 * @since 2.0
 */
public class EventPublisher<T extends EventSourcedAggregateRoot> implements EventHandler<CommandHandlingEntry<T>> {

    private static final Logger logger = LoggerFactory.getLogger(DisruptorCommandBus.class);

    private final EventStore eventStore;
    private final String aggregateType;
    private final EventBus eventBus;
    private final Executor executor;
    private final Set<String> blackListedAggregates = new HashSet<String>();

    /**
     * Initializes the EventPublisher to publish Events to the given <code>eventStore</code> and <code>eventBus</code>
     * for aggregate of given <code>aggregateType</code>.
     *
     * @param aggregateType The type of aggregate to store the events for
     * @param eventStore    The EventStore persisting the generated events
     * @param eventBus      The EventBus to publish events on
     * @param executor      The executor which schedules response reporting
     */
    public EventPublisher(String aggregateType, EventStore eventStore, EventBus eventBus, Executor executor) {
        this.eventStore = eventStore;
        this.aggregateType = aggregateType;
        this.eventBus = eventBus;
        this.executor = executor;
    }

    @SuppressWarnings("unchecked")
    @Override
    public void onEvent(CommandHandlingEntry<T> entry, long sequence, boolean endOfBatch) throws Exception {
        if (entry.isRecoverEntry()) {
            recoverAggregate(entry);
        } else {
            DisruptorUnitOfWork unitOfWork = entry.getUnitOfWork();
            EventSourcedAggregateRoot aggregate = unitOfWork.getAggregate();
            if (blackListedAggregates.contains(aggregate.getIdentifier().toString())) {
                notifyBlacklisted(entry, unitOfWork, aggregate);
            } else {
                publishChanges(entry, unitOfWork, aggregate);
            }
        }
    }

    private void recoverAggregate(CommandHandlingEntry<T> entry) {
        blackListedAggregates.remove(entry.getRecoveringAggregateIdentifier().toString());
        logger.info("Reset notification for {} received. The aggregate is removed from the blacklist",
                    entry.getRecoveringAggregateIdentifier());
    }

    @SuppressWarnings("unchecked")
    private void notifyBlacklisted(CommandHandlingEntry<T> entry, DisruptorUnitOfWork unitOfWork,
                                   EventSourcedAggregateRoot aggregate) {
        executor.execute(new ReportResultTask(
                entry.getCallback(), null,
                new AggregateStateCorruptedException(
                        unitOfWork.getAggregate(),
                        format("%s %s has been blacklisted and will be ignored until its state has been recovered.",
                               aggregate.getClass().getSimpleName(),
                               aggregate.getIdentifier()))));
    }

    @SuppressWarnings("unchecked")
    private void publishChanges(CommandHandlingEntry<T> entry, DisruptorUnitOfWork unitOfWork,
                                EventSourcedAggregateRoot aggregate) {
        unitOfWork.onPrepareCommit();
        Throwable exceptionResult = entry.getExceptionResult();
        try {
            eventStore.appendEvents(aggregateType, unitOfWork.getEventsToStore());
            Iterator<EventMessage> eventsToPublish = unitOfWork.getEventsToPublish().iterator();
            while (eventBus != null && eventsToPublish.hasNext()) {
                eventBus.publish(eventsToPublish.next());
            }
            unitOfWork.onAfterCommit();
        } catch (Exception e) {
            blackListedAggregates.add(aggregate.getIdentifier().toString());
            exceptionResult = new AggregateBlacklistedException(
                    aggregate.getIdentifier(),
                    format("%s %s state corrupted. "
                                   + "Blacklisting the aggregate until a reset message has been received",
                           aggregate.getClass().getSimpleName(),
                           aggregate.getIdentifier()), e);
            unitOfWork.onRollback(exceptionResult);
        } finally {
            unitOfWork.onCleanup();
        }
        if (exceptionResult != null || entry.getCallback().hasDelegate()) {
            executor.execute(new ReportResultTask(entry.getCallback(), entry.getResult(), exceptionResult));
        }
    }

    private class ReportResultTask<R> implements Runnable {

        private final CommandCallback<R> callback;
        private final R result;
        private final Throwable exceptionResult;

        public ReportResultTask(CommandCallback<R> callback, R result, Throwable exceptionResult) {
            this.callback = callback;
            this.result = result;
            this.exceptionResult = exceptionResult;
        }

        @Override
        public void run() {
            if (exceptionResult != null) {
                callback.onFailure(exceptionResult);
            } else {
                callback.onSuccess(result);
            }
        }
    }
}
