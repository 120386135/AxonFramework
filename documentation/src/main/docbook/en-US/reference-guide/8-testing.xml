<?xml version="1.0" encoding="UTF-8"?>
<!--
    ~ Copyright (c) 2010. Axon Framework
    ~
    ~ Licensed under the Apache License, Version 2.0 (the "License");
    ~ you may not use this file except in compliance with the License.
    ~ You may obtain a copy of the License at
    ~
    ~     http://www.apache.org/licenses/LICENSE-2.0
    ~
    ~ Unless required by applicable law or agreed to in writing, software
    ~ distributed under the License is distributed on an "AS IS" BASIS,
    ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    ~ See the License for the specific language governing permissions and
    ~ limitations under the License.
-->
<chapter xml:id="testing" version="5.0" xmlns="http://docbook.org/ns/docbook">
    <title>Testing</title>
    <para>One of the biggest benefits of CQRS, and especially that of event sourcing is that it is
        possible to express tests purely in terms of Events and Commands. Both being functional
        components, Events and Commands have clear meaning to the domain expert or business owner.
        This means that tests expressed in terms of Events and Commands don't only have a functional
        meaning, it also means that they hardly depend on any implementation choices.</para>
    <para>The features described in this chapter require the <code>axon-test</code> module, which
        can be obtained by configuration a maven dependency (use
            <code>&lt;artifactId>axon-text&lt;/artifactId></code>) or from the full package
        download. </para>
    <sect1>
        <title>Command Component Testing</title>
        <para>The command handling component is typically the component in any CQRS based
            architecture that contains the most complexity. Being more complex than the others, this
            also means that there are extra test related requirements for this component. Simply
            put: the more complex a component, the better it must be tested.</para>
        <para>Although being more complex, the API of a command handling component is fairly easy.
            It has command coming in, and events going out. In some cases, there might be a query as
            part of command execution. Other than that, commands and events are the only part of the
            API. This means that it is possible to completely define a test scenario in terms of
            events and commands. Typically, in the shape of:<itemizedlist>
                <listitem>
                    <para>given certain events in the past,</para>
                </listitem>
                <listitem>
                    <para>when executing this command,</para>
                </listitem>
                <listitem>
                    <para>expect these events to be published and/or stored.</para>
                </listitem>
            </itemizedlist></para>
        <para>Axon Framework provides a test fixture that allows you to do exactly that. This
            GivenWhenThenTestFixture allows you to configure a certain infrastructure, composed of
            the necessary command handler and repository, and express you scenario in terms of
            given-when-then events and commands.</para>
        <para>The following example shows the usage of the given-when-then test fixture with JUnit
            4:</para>
        <para>
            <programlistingco>
                <areaspec>
                    <area coords="7 55" xml:id="create-new-fixture-co"/>
                    <area coords="9 84" xml:id="create-generic-repository-co"/>
                    <area xml:id="register-command-handler-co" coords="10 68"/>
                    <area xml:id="given-when-then-co" coords="15 39"/>
                </areaspec>
                <programlisting language="java">public class MyCommandComponentTest {

    private FixtureConfiguration fixture;

    @Before
    public void setUp() {
        fixture = Fixtures.newGivenWhenThenFixture();
        MyCommandHandler myCommandHandler = new MyCommandHandler(
                              fixture.createGenericRepository(MyAggregate.class));
        fixture.registerAnnotatedCommandHandler(myCommandHandler);
    }

    @Test
    public void testFirstFixture() {
        fixture.given(new MyEvent(1))
               .when(new TestCommand())
               .expectVoidReturnType()
               .expectEvents(new MyEvent(2));
    }
}</programlisting>
                <calloutlist>
                    <callout arearefs="create-new-fixture-co">
                        <para>This line creates a fixture instance that can deal with
                            given-when-then style tests. It is created in configuration stage, which
                            allows us to configure the components that we need to process the
                            command, such as command handler and repository. An event bus and
                            command bus are automatically created as part of the fixture.</para>
                    </callout>
                    <callout arearefs="create-generic-repository-co">
                        <para>The <code>createGenericRepository</code> method creates, as expected,
                            a <code>GenericEventSourcingRepository</code> instance capable of
                            storing <code>MyAggregate</code> instances. This requires some
                            conventions on the MyAggregate class, as described in <xref
                                linkend="event-sourcing-repositories"/>.</para>
                    </callout>
                    <callout arearefs="register-command-handler-co">
                        <para>The <code>registerAnnotatedCommandHandler</code> method will register
                            any bean as being an <code>@CommandHandler</code> with the command bus.
                            All supported command types are automatically registered with the event
                            bus.</para>
                    </callout>
                    <callout arearefs="given-when-then-co">
                        <para>These four lines define the actual scenario and its expected result.
                            The first line defines the events that happened in the past. These
                            events define the state of the aggregate under test. In practical terms,
                            these are the events that the event store returns when an aggregate is
                            loaded. The second line defines the command that we wish to execute
                            against our system. Finally, we have two more methods that define
                            expected behavior. In the example, we use the recommended void return
                            type. The last method defines that we expect a single event as result of
                            the command execution.</para>
                    </callout>
                </calloutlist>
            </programlistingco>
        </para>
        <para>The given-when-then test fixture defines three stages: configuration, execution and
            validation. Each of these stages is represented by a different interface:
                <code>FixtureConfiguration</code>, <code>TestExecutor</code> and
                <code>ResultValidator</code>, respectively. The static
                <code>newGivenWhenThenFixture()</code> method on the <code>Fixtures</code> class
            provides a reference to the first of these, which in turn may provide the validator, and
            so forth.</para>
        <note>
            <para>To make optimal use of the migration between these stages, it is best to use the
                fluent interface provided by these methods, as shown in the example above.</para>
        </note>
        <simplesect>
            <title>Configuration</title>
            <para>During the configuration phase, you provide the building blocks required to
                execute the test. Specialized versions of the event bus, command bus and event store
                are provided as part of the fixture. There are getters in place to obtain references
                to them. The repository and command handlers need to be provided. This can be done
                using the <code>registerRepository</code> and <code>registerCommandHandler</code>
                (or <code>registerAnnotatedCommandHandler</code>) methods. If your aggregate allows
                the use of a generic repository, you can use the
                    <code>createGenericRepository</code> method to create a generic repository and
                register it with the fixture in a single call. The example above uses this
                feature.</para>
            <para>If the command handler and repository are configured, you can define the "given"
                events. These events need to be subclasses of <code>DomainEvent</code>, as they
                represent events coming from the event store. You do not need to set aggregate
                identifiers of sequence numbers. The fixture will inject those for you (using the
                aggregate identifier exposed by <code>getAggregateIdentifier</code> and a sequence
                number starting with 0.</para>
        </simplesect>
        <simplesect>
            <title>Execution</title>
            <para>The execution phase allows you to provide a command to be executed against the
                command handling component. That's all. Note that successful execution of this
                command requires that a command handler that can handle this type of command has
                been configured with the test fixture.</para>
        </simplesect>
        <simplesect>
            <title>Validation</title>
            <para>The last phase is the validation phase, and allows you to check on the activities
                of the command handling component. This is done purely in terms of return values and
                events (both stored and dispatched).</para>
            <para>The test fixture allows you to validate return values of your command handlers.
                You can explicitly define an expected void return value or any arbitrary value. You
                may also express the expectancy of an exception.</para>
            <para>The other component is validation of stored and dispatched events. In most cases,
                the stored and dispatched are equal. In some cases however, you may dispatch events
                (e.g. <code>ApplicationEvent</code>) that are not stored in the event store. In the
                first case, you can use the <code>expectEvents</code> method to validate events. In
                the latter case, you may use the <code>expectPublishedEvents</code> and
                    <code>expectStoredEvents</code> methods to validate published and stored events,
                respectively.</para>
            <para>There are two ways of matching expected events. </para>
            <para>The first is to pass in Event instances that need to be literally compared with
                the actual events. All properties of the expected Events are compared (using
                    <code>equals()</code>) with their counterparts in the actual Events. If one of
                the properties is not equal, the test fails and an extensive error report is
                generated.</para>
            <para>The other way of expressing expectancies is using Matchers (provided by the
                Hamcrest library). <code>Matcher</code> is an interface prescribing two methods:
                    <code>matches(Object)</code> and <code>describeTo(Description)</code>. The first
                returns a boolean to indicate whether the matcher matches or not. The second allows
                you to express your expectation. For example, a "GreaterThanTwoMatcher" could append
                "any event with value greater than two" to the description. Descriptions allow
                expressive error messages to be created about why a test case fails.</para>
            <para>Creating matchers for a list of events can be tedious and error-prone work. To
                simplify things, Axon provides a set of matchers that allow you to provide a set of
                event specific matchers and tell Axon how they should match against the list.</para>
            <para>Below is an overview of the available Event List matchers and their purpose:<itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">List with all of</emphasis>: <code>Matchers.listWithAllOf(event matchers...)</code></para>
                        <para>This matcher will succeed if all of the provided Event Matchers match
                            against at least one event in the list of actual events. It does not
                            matter whether multiple matchers match against the same event, nor if an
                            event in the list does not match against any of the matchers.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">List with any of</emphasis>: <code>Matchers.listWithAnyOf(event matchers...)</code></para>
                        <para>This matcher will succeed if one of more of the provided Event
                            Matchers matches against one or more of the events in the actual list of
                            events. Some matchers may not even match at all, while another matches
                            against multiple others.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Sequence of Events</emphasis>: <code>Matchers.sequenceOf(event matchers...)</code></para>
                        <para>Use this matcher to verify that the actual Events are match in the
                            same order as the provided Event Matchers. It will succeed if each
                            Matcher matches against an Event that comes after the Event that the
                            previous matcher matched against. This means that "gaps" with unmatched
                            events may appear.</para>
                        <para>If, after evaluating the events, more matchers are available, they are
                            all matched against "<code>null</code>". It is up to the Event Matchers
                            to decide whether they accept that or not.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Exact sequence of Events</emphasis>: <code>Matchers.exactSequenceOf(event matchers...)</code></para>
                        <para>Variation of the "Sequence of Events" matcher where gaps of unmatched
                            events are not allowed. This means each matcher must match against the
                            Event directly following the Event the previous matcher matched
                            against.</para>
                    </listitem>
                </itemizedlist></para>
            <para> For convenience, a few commonly required Event Matchers are provided. They match
                against a single Event instance:<itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Equal Event</emphasis>:
                                <code>Matchers.equalTo(event instance...)</code></para>
                        <para>Verifies that the given event is semantically equal to the actual
                            event. This matcher will compare all values in the fields of both actual
                            and expected Events using a null-safe equals method. The aggregate
                            identifier and sequence number are ignored, as they are often not set on
                            the "expected" Event.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">No More Events</emphasis>:
                                <code>Matchers.andNoMore()</code> or
                            <code>Matchers.nothing()</code></para>
                        <para>Only matches against a <code>null</code> value. This matcher can be
                            added as last matcher to the Exact Sequence of Events matchers to ensure
                            that no unmatched events remain.</para>
                    </listitem>
                </itemizedlist></para>
            <para>Below is a small code sample displaying the usage of these matchers. In this
                example, we expect two events to be stored and published. The first event must be
                "aThirdEvent", and the second "aFourthEventWithSomeSpecialThings". There may be no
                third event, as that will fail against the "andNoMore"
                matcher.<programlisting language="java">fixture.given(new FirstEvent(), new SecondEvent())
       .when(new DoSomethingCommand(fixture.getAggregateIdentifier()))
       .expectEvents(exactSequenceOf(
           aThirdEvent(),
           aFourthEventWithSomeSpecialThings(),
           andNoMore()
       ));</programlisting></para>
        </simplesect>
    </sect1>
</chapter>
