<?xml version="1.0" encoding="UTF-8"?>
<!--
    ~ Copyright (c) 2010. Axon Framework
    ~
    ~ Licensed under the Apache License, Version 2.0 (the "License");
    ~ you may not use this file except in compliance with the License.
    ~ You may obtain a copy of the License at
    ~
    ~     http://www.apache.org/licenses/LICENSE-2.0
    ~
    ~ Unless required by applicable law or agreed to in writing, software
    ~ distributed under the License is distributed on an "AS IS" BASIS,
    ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    ~ See the License for the specific language governing permissions and
    ~ limitations under the License.
-->
<chapter id="monitoring" xmlns="http://docbook.org/ns/docbook">
    <title>Monitoring</title>
    <para>During development of an application you have multiple mechanism to see what your
        application is doing. Often we use <code>System.out.println</code>, but more often the
        better alternative, a good logging framework. Going through these logs can be cumbersome in
        case of to many logs, error not very informative with to little logs. Other mechanisms are
        special tools that you deploy with your application. You can than monitor how many times
        classes and methods were accessed and how long it took. This mechanism does not really
        understand you application. To overcome these problems, we want to have a way to monitor
        your application with the knowledge of the application.</para>
    <para>This chapter discusses monitoring the internals of the axon framework as used in your
        application. A few examples of what you can monitor from the internals of axon are:</para>
    <para>
        <itemizedlist>
            <listitem>
                <para>The number of command received</para>
            </listitem>
            <listitem>
                <para>The number of event dispatched</para>
            </listitem>
            <listitem>
                <para>The number of registered command handlers</para>
            </listitem>
            <listitem>
                <para>The numer of registered event listeners</para>
            </listitem>
        </itemizedlist>
    </para>
    <para>In this chapter we discuss the monitoring elements of axon. We have a look at the classes
        you can use to create your own monitoring solution. Axon comes with a JMX implementation to
        expose the monitors.</para>
    <sect1>
        <title>Gathering statistics</title>
        <para>In Axon we have made a distinction between exposing statistics about the internals of
            the application and the monitoring implementation. A number of objects in axon implement
            the interface <code>Monitored</code> which exposes one method
                <code>getStatistics()</code>. The statistics objects are specific for each monitored
            object. An important aspect of statistics is the amount of effort it takes to gather
            statistics. If these can be high, we made sure you can switch them of. If we look at
            command handling for instance. The number of received commands can be high and
            continuous. Therefore we want to be able to switch them off. The number of registered
            command handlers is not that high and certainly not changing by the second. Also the
            value of registered command handled is only meaningfull if they are enabled all the
            time. To enable this mechanism, all statistics objects implement the
                <code>Statistics</code> interface. This interface specifies two methods
                <code>enable()</code> and <code>disable</code>. The following image gives an
            overview of the classes that are taking part in gathering the statistics.</para>
        <figure>
            <title>Monitoring overview</title>
            <mediaobject>
                <info>Overview generic monitoring mechanism of axon</info>
                <imageobject role="fo">
                    <imagedata align="center" format="png"
                        fileref="monitoring-overview-hires.png" width="15cm"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata format="png" fileref="monitoring-overview.png"/>
                </imageobject>
            </mediaobject>
        </figure>
        
    </sect1>
    <sect1>
        <title>Monitoring using JMX</title>
        <para>JMX is short for Java Management Extensions. We are not going to explain JMX itself in
            this manual. Other resources are available on the web:</para>
        <itemizedlist>
            <listitem>
                <para><uri>http://java.sun.com/developer/technicalArticles/J2SE/jmx.html</uri></para>
            </listitem>
            <listitem>
                <para><uri>http://java.sun.com/javase/technologies/core/mntr-mgmt/javamanagement/</uri></para>
            </listitem>
            <listitem>
                <para><uri>http://www.jteam.nl/dms/whitepapers/JavaApplicationMonitoringAndManagement.pdf</uri></para>
            </listitem>
        </itemizedlist>
        <para>The most important thing to know about JMX is that you need an interface that ends
            with MXBean and an implementation that implements that interface. There are other
            mechanims like using annotations and with the spring framework it can even become
            easier. To understand how monitoring with JMX is implemented in the Axon framework, you
            only need to remember interface with name thats ends with MXBean and an
            implementation.</para>
        <para>All the methods in the interface are exposed through JMX. You can provide information,
            like the amount of registered command handlers. You can also provided operations, like
            enable or disable statistics gathering. In Axon we call these beans the managers of the
            monitors. In the case of the <code>SimpleCommandBus</code>, that implements the
                <code>Monitored</code> interface, the <code>SimpleEventBusManager</code> manages the
            monitoring of the <code>SimpleCommandBusStatistics</code>.</para>
        <para>MXBeans need to be registered with an MBeanServer. When running in for instance
            Tomcat, you can obtain the MBeanServer from tomcat. Obtaining the MBeanServer and
            registering the MXBean is been taking care of by the <code>ManagementContext</code>. The
            management context is provided through the constructor of the MXBean implementation and
            exposes a method <code>registerMBean</code>. The <code>ManagementContext</code> also
            provides an easy way to enable or disable statistics from all monitors when registering
            them with the MBeanServer. The following diagram gives you an overview of the most
            important objects related to the jmx monitoring.</para>
        <figure>
            <title>Monitoring jmx</title>
            <mediaobject>
                <info>Overview jmx components of monitoring axon</info>
                <imageobject role="fo">
                    <imagedata align="center" format="png"
                        fileref="monitoring-jmx-hires.png" width="15cm"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata format="png" fileref="monitoring-jmx.png"/>
                </imageobject>
            </mediaobject>
        </figure>
        
        <para>We have also used JMX in the sample, the following image gives you a look at jconsole
        looking at one of our MXBeans.</para>
        <figure>
            <title>Monitoring jconsole</title>
            <mediaobject>
                <info>View of the jmx beans using jconsole</info>
                <imageobject role="fo">
                    <imagedata align="center" format="png"
                        fileref="monitoring-jconsole-hires.png" width="15cm"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata format="png" fileref="monitoring-jconsole.png"/>
                </imageobject>
            </mediaobject>
        </figure>
        
    </sect1>
</chapter>