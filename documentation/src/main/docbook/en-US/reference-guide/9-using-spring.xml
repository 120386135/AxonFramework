<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010. Axon Framework
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id="using-spring" xmlns="http://docbook.org/ns/docbook">
    <title>Using Spring</title>
    <para>The AxonFramework has many integration points with the Spring Framework. All major
        building blocks in Axon are Spring configurable. Furthermore, there are some Bean Post
        Processors that scan the application context for building blocks and automatically wires
        them.</para>
    <para>In addition, the Axon Framework makes use of Spring's Extensible Schema-based configuration feature to make Axon
        application configuration even easier. Axon Framework sports a Spring context configuration namespace of its own that
        allows you to create common configurations using Spring's XML configuration syntax, but in a more functionally
        expressive way than by wiring together explicit bean declarations.</para>

	<sect1>
		<title>Adding support for the Java Platform Common Annotations</title>
    	<para>Axon uses JSR 250 annotations (<code>@PostConstruct</code> and <code>@PreDestroy</code>)
        to annotate lifecycle methods of some of the building blocks. Spring doesn't always
        automatically evaluate these annotations. To force Spring to do so, add the
            <code>&lt;context:annotation-config/></code> tag to your application context, as shown
        in the example
        below:
        <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:context="http://www.springframework.org/schema/context">


    &lt;context:annotation-config/>

&lt;/beans></programlisting>
		</para>
	</sect1>
	
    <sect1>
		<title>Getting started with the Axon namespace</title>
			<para>As mentioned earlier, the Axon Framework provides a separate namespace full of elements that allow you to
				configure your Axon applications quickly when using Spring. In order to use this namespace you must first add the
				declaration for this namespace to your Spring XML configuration files.</para>
			<para>Assume you already have an XML configuration file like this:</para>
    
			<programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?>
			
&lt;beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">			
	
		...
               
&lt;/beans>
			</programlisting>
               
			<para>To modify this configuration file to use elements from the Axon namespace, just add the following declarations:</para>
               
			<programlistingco>
				<areaspec>
					<area coords="3" xml:id="ex.nmsp.decl"/>
					<area coords="5" xml:id="ex.nmsp.loc"/>
				</areaspec>

				<programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:axon="http://www.axonframework.org/schema/axon-framework-1.0"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.axonframework.org/schema/axon-framework-1.0 http://www.axonframework.org/schema/axon-framework-1.0.xsd">
				</programlisting>
                       
				<calloutlist>
					<callout arearefs="ex.nmsp.decl">
						<para>The declaration of the <code>axon</code> namespace reference that you will use through the configuration file.</para>
					</callout>
					<callout arearefs="ex.nmsp.loc">
						<para>Maps the Axon namespace to the XSD where the namespace is defined.</para>
					</callout>
				</calloutlist>
			</programlistingco>
	</sect1>
	
    <sect1>
        <title>Wiring event handlers</title>
        <para>Using the annotated event listeners is very easy when you use Spring. All you need to
            do is configure the <code>AnnotationEventListenerBeanPostProcessor</code> in your
            application context. This post processor will discover beans with <code>@EventHandler</code>
            annotated methods and automatically connect them to the event bus.<programlistingco>
                <areaspec>
                    <area xml:id="postprocessor-co" coords="3 67"/>
                    <area xml:id="optional-eventbus-reference-co" coords="4 52"/>
                    <area xml:id="eventlistener-co" coords="7 76"/>
                </areaspec>
                <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans">

    &lt;bean class="org...AnnotationEventListenerBeanPostProcessor">
        &lt;property name="eventBus" ref="eventBus"/>
    &lt;/bean>

    &lt;bean class="org.axonframework.sample.app.query.AddressTableUpdater"/>

&lt;/beans></programlisting>
                <calloutlist>
                    <callout arearefs="postprocessor-co">
                        <para>This bean post processor will scan the application context for beans
                            with an <code>@EventHandler</code> annotated method.</para>
                    </callout>
                    <callout arearefs="optional-eventbus-reference-co">
                        <para>The reference to the event bus is optional, if only a single
                                <code>EventBus</code> implementation is configured in the
                            application context. The bean postprocessor will automatically find and
                            wire it. If there is more than one <code>EventBus</code> in the context,
                            you must specify the one to use in the postprocessor.</para>
                    </callout>
                    <callout arearefs="eventlistener-co">
                        <para>This event listener will be automatically recognized and subscribed to
                            the event bus.</para>
                    </callout>
                </calloutlist>
            </programlistingco></para>
        <para>You can also wire event listeners "manually", by explicitly defining them within a
                <code>AnnotationEventListenerAdapter</code> bean, as shown in the code sample below.<programlistingco>
                <areaspec>
                    <area xml:id="adapter-co" coords="3 82"/>
                    <area xml:id="eventbus-reference-co" coords="7 52"/>
                </areaspec>
                <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans">

    &lt;bean class="org.axonframework...annotation.AnnotationEventListenerAdapter">
        &lt;constructor-arg>
            &lt;bean class="org.axonframework.sample.app.query.AddressTableUpdater"/>
        &lt;/constructor-arg>
        &lt;property name="eventBus" ref="eventBus"/>
    &lt;/bean>

&lt;/beans></programlisting>
                <calloutlist>
                    <callout arearefs="adapter-co">
                        <para>The adapter turns any bean with <code>@EventHandler</code> methods
                            into an <code>EventListener</code></para>
                    </callout>
                    <callout arearefs="eventbus-reference-co">
                        <para>You need to explicitly reference the event bus to which you like to
                            register the event listener</para>
                    </callout>
                </calloutlist>
            </programlistingco></para>
        <warning>
            <para>Be careful when wiring event listeners "manually" while there is also an
                    <code>AnnotationEventListenerBeanPostProcessor</code> in the application
                context. This will cause the event listener to be wired twice.</para>
        </warning>
    </sect1>
    <sect1>
        <title>Wiring the event bus</title>
        <para>In a typical Axon application, there is only one event bus. Wiring it is just a matter
            of creating a bean of a subtype of <code>EventBus</code>. The
                <code>SimpleEventBus</code> is the provided implementation.
            <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans">

    &lt;bean id="eventBus" class="org.axonframework.eventhandling.SimpleEventBus"/>

&lt;/beans></programlisting></para>
    </sect1>
    <sect1>
        <title>Wiring the command bus</title>
        <para>The command bus doesn't take any configuration to use. However, it allows you to
            configure a number of interceptors that should take action based on each incoming
            command.</para>
        <para>
            <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans">

    &lt;bean id="eventBus" class="org.axonframework.commandhandling.CommandBus">
        &lt;property name="interceptors">
            &lt;list>
                &lt;bean class="org.axonframework...SpringTransactionalInterceptor">
                    &lt;property name="transactionManager" ref="transactionManager"/>
                &lt;/bean>
                &lt;bean class="other-interceptors"/>
            &lt;/list>
        &lt;/property>
    &lt;/bean>

&lt;/beans></programlisting>
        </para>
    </sect1>
    <sect1>
        <title>Wiring the Repository</title>
        <para>Wiring a repository is very similar to any other bean you would use in a Spring
            application. Axon only provides abstract implementations for repositories, which means
            you need to extend one of them. See <xref linkend="repositories-and-event-stores"/> for
            the available implementations.</para>
        <para>Repository implementations that do support event sourcing just need the event bus to
            be configured, as well as any dependencies that your own implementation has.
            <programlisting language="xml">&lt;bean id="simpleRepository" class="my.package.SimpleRepository">
    &lt;property name="eventBus" ref="eventBus"/>
&lt;/bean></programlisting></para>
        <para>Repositories that support event sourcing will also need an event store, which takes
            care of the actual storage and retrieval of events. The example below shows a repository
            configuration of a repository that extends the
            <code>EventSourcingRepository</code>.<programlisting language="xml">&lt;bean id="contactRepository" class="org.axonframework.sample.app.command.ContactRepository">
    &lt;property name="eventBus" ref="eventBus"/>
    &lt;property name="eventStore" ref="eventStore"/>
&lt;/bean></programlisting></para>
        <para>In many cases, you can use the <code>GenericEventSourcingRepository</code>. Below is
            an example of XML application context configuration to wire such a repository.</para>
        <para>
            <programlisting language="xml">&lt;bean id="myRepository" class="org.axonframework.eventsourcing.GenericEventSourcingRepository">
    &lt;constructor-arg value="fully.qualified.class.Name"/>
    &lt;property name="eventBus" ref="eventBus"/>
    &lt;property name="eventStore" ref="eventStore"/>
&lt;/bean></programlisting>
        </para>
        <para>The repository will delegate the storage of events to the configured
                <code>eventStore</code>, while these events are dispatched using the provided
                <code>eventBus</code>.</para>
    </sect1>
    <sect1>
        <title>Wiring the event store</title>
        <para>All event sourcing repositorties need an event store. Wiring the
                <code>JpaEventStore</code> and the <code>FileSystemEventStore</code> is very
            similar, but the <code>JpaEventStore</code> needs to run in a Spring managed
            transaction. Unless you use the <code>SpringTransactionalInterceptor</code> on your
            command bus, you need to declare the annotation-driven transaction-manager as shown in
            the sample below.</para>
        <para>
            <programlisting language="xml">&lt;bean id="eventStore" class="org.axonframework.eventstore.jpa.JpaEventStore"/>

&lt;!-- enable the configuration of transactional behavior based on annotations -->
&lt;tx:annotation-driven transaction-manager="txManager"/>

&lt;!-- declare transaction manager, data source, EntityManagerFactoryBean, etc --></programlisting>
        </para>
    </sect1>
    <sect1>
        <title>Configuring Snapshotting</title>
        <para>Configuring snapshotting using Spring is not complex, but does require a number of
            beans to be configured in your application context.</para>
        <para>The <code>EventCountSnapshotterTrigger</code> needs to be configured as a proxy for
            your event store. That means all repositories should load and save aggregate from the
                <code>EventCountSnapshotterTrigger</code>, instead of the acutal event store.</para>
        <programlisting language="xml">&lt;bean id="triggeringEventStore" class="org.axonframework.eventsourcing.EventCountSnapshotterTrigger">
    &lt;property name="eventStore" ref="eventStore"/>
    &lt;property name="snapshotter" ref="snapshotter"/>
    &lt;property name="triggerConfiguration">
        &lt;props>
            &lt;prop key="Contact">20&lt;/prop>
        &lt;/props>
    &lt;/property>
&lt;/bean></programlisting>
        <para>The sample above configures an EventCountSnapshotter trigger that will trigger
            Snapshot creation for a Contact when 20 or more events are required to reload its
            current state. Any other aggregate type will revert to the default, which is 50 unless
            defined otherwise.</para>
        <para>The snapshotter is configured as follows:</para>
        <programlisting language="xml">&lt;bean id="snapshotter" class="org.axonframework.eventsourcing.SpringAggregateSnapshotter">
    &lt;property name="eventStore" ref="eventStore"/>
    &lt;property name="executor" ref="taskExecutor"/>
&lt;/bean>

&lt;bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
    &lt;property name="corePoolSize" value="2"/>
    &lt;property name="maxPoolSize" value="5"/>
    &lt;property name="waitForTasksToCompleteOnShutdown" value="true"/>
&lt;/bean></programlisting>
        <para>In this sample, a <code>SpringAggregateSnapshotter</code> is used. This snapshotter
            will automatically detect any <code>PlatformTransactionManager</code> in your
            application context, as well as <code>AggregateFactory</code> instances, which all
            repositories typically are. That means you only need very little configuration to use a
                <code>Snapshotter</code> within Spring.</para>
    </sect1>
</chapter>
