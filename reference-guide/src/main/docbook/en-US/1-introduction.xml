<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2010. Axon Framework
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id="introduction" xmlns="http://docbook.org/ns/docbook">
    <title>Introduction</title>
    <para>Axon is a lightweight framework that helps developers build scalable and extensible
        applications by addressing these concerns directly in the architecture. This reference guide
        explains what Axon is, how it can help you and how you can use it. There is even a sample
        web application built using Axon that shows how you can leverage the provided features to
        quickly build a dynamic and extensible application.
    </para>
    <para>If you want to know more about Axon and its background, continue reading in<xref
            linkend="about-axon"/>. If you're eager to get started building your own application
        using Axon, go quickly to<xref linkend="getting-started"/>. All help is welcome. If you're
        interested in helping out building the Axon Framework,
        <xref linkend="contributing"/>
        will
        contain the information you require. Finally, this chapter covers some legal concerns in
        <xref linkend="license"/>.
    </para>
    <sect1 id="about-axon">
        <title>Axon Framework Background</title>
        <sect2>
            <title>A brief history</title>
            <para>The demands on software projects increase rapidly, as time progresses. Companies
                no longer accept brochure-like homepage to promote their business; they want their
                (web)applications to evolve together with their business. That means that not only
                projects and code bases become more complex, it also means that functionality is
                constantly added, changed and (unfortunately not enough) removed. It can be
                frustrating to find out that a seemingly easy-to-implement feature can require
                development teams to take apart an entire application. Furthermore, today's
                webapplications target an audience of potentially billions of people, making
                scalability a bare necessity.
            </para>
            <para>Although there are many applications and frameworks around that deal with
                scalability issues, such as GigaSpaces and Terracotta, they share one fundamental
                flaw. These stacks try to solve the scalability issues while letting developers
                develop application using the layered architecture they are used to. In some cases,
                they even prevent or severely limit the use of a real domain model, forcing all
                domain logic into services. Although that is faster to start building an
                application, eventually this approach will cause complexity to increase and
                development to slow down.
            </para>
            <para>Greg Young, initiator of the Command Query Responsiblity Segregation (CQRS)
                pattern addressed these issues by drastically changing the way applications are
                architected. Instead of separating logic into separate layers, logic is separated
                based on whether it is changing an applition's state or querying it. That means that
                executing commands (actions that potentially change an application's state) are
                executed by completely different components than those that query for the
                application's state. The most important reason for this separation is the fact that
                there are different technical and non-technical requirements for each of them. When
                commands are executed, the query components are asynchronously updated using events.
                These asynchronous updates through events is what makes this architecture is
                extensible, scalable and ultimately more maintainable.
                <note>
                    <para>A full explanation of CQRS is not within the scope of this document. If
                        you would like to have more background information about CQRS, visit the
                        Axon Framework website:<link xmlns:ns1="http://www.w3.org/1999/xlink"
                                                     ns1:href="http://www.axonframework.org/">
                            www.axonframework.org</link>.
                        It contains links to background information.
                    </para>
                </note>
            </para>
            <para>Since CQRS is so fundamentally different than the layered-architecture which
                dominates the software landscape nowadays, it is quite hard to grasp. It is not
                uncommon for developers to walk into a few traps while trying to find their way
                around this architecture. That's why Axon Framework was conceived: to help
                developers implement CQRS applications while focussing on the business logic.
            </para>
        </sect2>
        <sect2>
            <title>What is Axon?</title>
            <para>Axon Framework helps build scalable, extensible and maintainable applications by
                supporting developers apply the Command Query Responsiblity Segregation (CQRS)
                architectural pattern. It does so by providing implementations, sometimes complete,
                sometimes abstract, of the most important building blocks, such as aggregates,
                repositories and event busses (the dispatching mechanism for events). Furthermore,
                Axon provides annotation support, which allows you to build aggregates and event
                listeners withouth tying your code to Axon specific logic. This allows you to focus
                on your business logic, instead of the plumbing, and helps you makes your code
                easier to test in isolation.
            </para>
            <para>Axon does not, in any way, try to hide the CQRS architecture or any of its
                components from developers. Therefore, depending on team size, it is still advisable
                to have one or more developers with a thorough understanding of CQRS on each team.
                However, Axon does help when it comes to guaranteeing delivering events to the right
                event listeners and processing them concurrently and in the correct order. These
                multi-threading concerns are typically hard to deal with, leading to hard-to-trace
                bugs and sometimes complete application failure. When you have a tight deadline, you
                probably don't even want to care about these concerns. Axon's code is thoroughly
                tested to prevent these types of bugs.
            </para>
            <para>Most of the concerns Axon addresses are located inside the JVM. However, for an
                application to be scalable, a single JVM is not enough. Therefore, Axon provides the
                <code>axon-intregration</code>
                module, which allows events to be sent to a
                Spring Integration channel. From there, you can use Spring Integration to dispatch
                events to application components on different machines. In the near future, Axon
                will provide more ways to dispatch events between JVM's and physical
                machines.
            </para>
        </sect2>
        <sect2>
            <title>When to use Axon?</title>
            <para>Will each application benefit from Axon? Unfortunately not. Simple CRUD (Create,
                Read, Update, Delete) applications which are not expected to scale will probably not
                benefit from CQRS or Axon. Fortunately, there is a wide variety of applications that
                does benefit from Axon.
            </para>
            <para>Applications that will most likely benefit from CQRS and Axon are those that show
                one or more of the following characteristics:
                <itemizedlist>
                    <listitem>
                        <para>The application is likely to be extended with new functionality during
                            a long period of time. For example, an online store might start off with
                            a system that tracks progress of Orders. At a later stage, this could be
                            extended with Inventory information, to make sure stocks are updated
                            when items are sold. Even later, accounting can require financial
                            statistics of sales to be recorded, etc. Although it is hard to predict
                            how software projects will evolve in the future, the majority of this
                            type of application is clearly presented as such.
                        </para>
                    </listitem>
                    <listitem>
                        <para>The application has a high read-to-write ratio. That means data is
                            only written a few times, and read many times more. Since data sources
                            for queries are different to those that are used for command validation,
                            it is possible to optimize these data sources for fast querying.
                            Duplicate data is no longer an issue, since events are published when
                            data changes.
                        </para>
                    </listitem>
                    <listitem>
                        <para>The application presents data in many different formats. Many
                            applications nowadays don't stop when showing information on a web page.
                            Some applications, for example, send monthly emails to notify users of
                            changes that occured that might be relevant to them. Search engines are
                            another example. They use the same data your application does, but in a
                            way that is optimized for quick searching. Reporting tools aggregate
                            information into reports that show data evolution over time. This,
                            again, is a different format of the same data. Using Axon, each data
                            source can be updated independently of each other on a real-time or
                            scheduled basis.
                        </para>
                    </listitem>
                    <listitem>
                        <para>When an application has clearly separated components with different
                            audiences, it can benefit from Axon, too. An example of such application
                            is the online store. Employees will update product information and
                            availability on the website, while customer place orders and query for
                            their order status. With Axon, these components can be deployed on
                            separate machines and scaled completely differently. They are kept
                            up-to-date using the events, which Axon will dispatch to all subscribed
                            components, regardles of the machine they are deployed on.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </sect2>
        <!--
        <sect2>
            <title>Axon sample application</title>
            <para>To show how applications can benefit from Axon, and as a guide when developing
                applications, Axon Framework comes with a sample application: the addressbook. This
                application has a Adobe Flex front-end, with an Axon-based server side component.
                The application and its sources can be downloaded from the Axon Framework website:
                    <link xmlns:ns1="http://www.w3.org/1999/xlink"
                    ns1:href="http://www.axonframework.org">www.axonframework.org</link>. <xref
                    linkend="sample-applications"/> contains more information about the sample
                application.</para>
        </sect2>
        -->
    </sect1>
    <sect1 xml:id="getting-started">
        <title>Getting started</title>
        <para>This section will explain how you can obtain the binaries for Axon to get started.
            There are currently two ways: either download the binaries from our website, or (if you
            use maven) configure you pom.xml file to include the Axon binaries in your build.
        </para>
        <sect2>
            <title>Download Axon</title>
            <para>You can download the Axon Framework from our downloads page: <link
                    xmlns:ns1="http://www.w3.org/1999/xlink"
                    ns1:href="http://www.axonframework.org/download"
                    >axonframework.org/download</link>.
            </para>
            <para>This page offers a number of downloads. Typically, you would want to use the
                latest stable release. However, if you're eager to get started using the latest and
                greatest features, you could consider using the snapshot releases instead. The
                downloads page contains a number of assemblies for you to download. Some of them
                only provide the Axon library itself, while others also provide the libraries that
                Axon depends on. There is also a "full" zip file, which contains Axon, its
                dependencies, the sources and the documentation, all in a single download.
            </para>
            <para>If you really want to stay on the bleeding edge of development, you can also
                checkout the sources from the subversion repository:
                <uri>http://axonframework.googlecode.com/svn/trunk/</uri>.
            </para>
        </sect2>
        <sect2>
            <title>Configure Maven</title>
            <para>If you use maven as your build tool, you need to configure the correct
                dependencies for your project. Since the Axon Framework is not yet in one of the
                major maven repositories, you have to configure a repository for the Axon artifacts
                in your pom.
            </para>
            <para>Add the following code in your dependencies section:</para>
            <programlisting language="xml"><![CDATA[<dependency>
    <groupId>org.axonframework</groupId>
    <artifactId>axon-core</artifactId>
    <version>0.5</version>
</dependency>]]></programlisting>
            <para>To make sure your maven installation has access to the axon repository, where the
                necessary jars and poms are located, you can do at least two things. You can
                configure your repository proxy to access the axon repository and you can configure
                your project to look for the axon repository.
            </para>
            <para>If you use a repository proxy, such as Artifactory or Nexus, configure the
                following url:<uri>http://axonframework.googlecode.com/svn/repo</uri>.
            </para>
            <para>Alternatively, you can also add a repository configuration to your project's
                pom.xml:
            </para>
            <programlisting language="xml"><![CDATA[<repositories>
  <repository>
    <id>axon</id>
    <url>http://axonframework.googlecode.com/svn/repo</url>
  </repository>
 <repositories>]]></programlisting>
            <para>Most of the features provided by the Axon Framework are optional and require
                additional dependencies. We have chosen not to add these dependencies by default, as
                they would potentioly clutter your project with artifacts you don't need. This
                section discusses these dependecies and describes in what scenarios you need them.
            </para>
            <simplesect>
                <title>Event Sourcing</title>
                <para>The event sourcing repository that is provided in Axon
                        (<code>XStreamFileSystemEventStore</code>) uses XStream by default. You need
                    to add the following maven dependency to your project to use this repository
                    implementation if you would like to use these default. If you provide your own
                    serialization strategy based on another library, then you do not have to include
                    this dependency. </para>
                <programlisting language="xml"><![CDATA[<dependency>
    <groupId>com.thoughtworks.xstream</groupId>
    <artifactId>xstream</artifactId
    <version>1.3.1</version>
</dependency>]]></programlisting>
            </simplesect>
            <simplesect>
                <title>Spring Integration</title>
                <para>The Axon Framework provides connectors that allow you to publish events on a
                    Spring Integration channel. These connectors require Spring Integration on the
                    classpath. You need the following maven dependency to use these connectors.
                </para>
                <programlisting language="xml"><![CDATA[<dependency>
    <groupId>org.springframework.integration</groupId>
    <artifactId>spring-integration-core</artifactId>
    <version>1.0.3.RELEASE</version>
</dependency>]]></programlisting>
            </simplesect>
        </sect2>
    </sect1>
    <sect1 xml:id="contributing">
        <title>Contributing to Axon Framework</title>
        <para>Development on the Axon Framework is never finished. There will always be more
            features that we like to include in our framework to continue making development of
            scalabale and extensible application easier. This means we are constantly looking for
            help in developing our framework.
        </para>
        <para>There is a number of ways in which you can contribute to the Axon Framework:
            <itemizedlist>
                <listitem>
                    <para>You can report any bugs, feature requests or ideas about improvemens on
                        our issue page: <link xmlns:ns1="http://www.w3.org/1999/xlink"
                                             ns1:href="http://www.axonframework.org/issues"> axonframework.org/issues</link>. All ideas are welcome. Please be as
                        exact as possible when reporting bugs. This will help us reproduce and thus
                        solve the problem faster.
                    </para>
                </listitem>
                <listitem>
                    <para>If you have created a component for your own application that you think
                        might be useful to include in the framework, send us a patch or a zip
                        containing the source code. We will evaluate it and try to fit it in the
                        framework. Please make sure code is properly documented using javadoc. This
                        helps us to understand what is going on.
                    </para>
                </listitem>
                <listitem>
                    <para>If you know of any other way you think you can help us, please do not
                        hesitate to contact us.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </sect1>
    <sect1 xml:id="license">
        <title>License information</title>
        <para>The Axon Framework and its documentation are licensed under the Apache License,
            Version 2.0. You may obtain a copy of the License at <link
                    xmlns:ns1="http://www.w3.org/1999/xlink"
                    ns1:href="http://www.apache.org/licenses/LICENSE-2.0" ns1:show="new"
                    >http://www.apache.org/licenses/LICENSE-2.0</link>.
        </para>
        <para>Unless required by applicable law or agreed to in writing, software distributed under
            the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
            KIND, either express or implied. See the <link xmlns:xlink="http://www.w3.org/1999/xlink"
                  xlink:href="http://www.apache.org/licenses/LICENSE-2.0" xlink:show="new">License</link>
            for the specific language governing permissions and limitations under the License.
        </para>
    </sect1>
</chapter>
